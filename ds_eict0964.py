# -*- coding: utf-8 -*-
"""DS_EICT0964.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V1eeNJ8MK5G_DkKf-bQgEbzLfkrwYPx-

***IMPORTING LIBRARIES***
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

"""**LOAD THE DATASET**"""

df = pd.read_csv('/content/test.csv',index_col="Formatted_Date")
print(df)

"""***EDA (EXPLOTARY DATA ANALYSIS)***"""

# 1.head of the dataset

print(df.head())

print(df.tail())

print(df.sample(10))

#2.the shape of the dataset

print(df.shape)

#3.list types of all columns

print(df.dtypes)

# 4.info of the dataset

print(df.info())

# 5.summary of the dataset

print(df.describe())

"""***DATA CLEANING***"""

#1.drop the duplicates

print(df.shape)

df=df.drop_duplicates()

print(df.shape)

#2.check the NULL values

print(df.isnull().sum())

"""***ENCODING(for converting in number format)***"""

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
#df.Formatted_Date = le.fit_transform(df.Formatted_Date)
df.Summary = le.fit_transform(df.Summary)
df.Precip_Type = le.fit_transform(df.Precip_Type)
df.Daily_Summary = le.fit_transform(df.Daily_Summary)


print(df.info())

print(df.describe())

#removing the not required columns

df.drop('Cloud_Cover', axis=1,inplace= True)
df.drop('Visibility', axis=1,inplace= True)

print(df.columns)

print(df.shape)

"""***splitting the dataset***"""

x = df.iloc[:,0:9].values #input 

y = df.iloc[:,-1].values
print(x)
print(x.shape)

print(y)
print(y.shape)

print(x.ndim)

print(y.ndim)


print(df.head())


from sklearn.model_selection import train_test_split 
x_train, x_test, y_train, y_test = train_test_split(x,y, random_state = 0,test_size=0.2)

print(x_train.shape)

print(x_test.shape)

print(y_train.shape)

print(y_test.shape)

"""***FEATURE SCALLING***"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.fit_transform(x_test)
print(x_test)

"""***MACHINE LEARNING MODELS***"""

#KNeighborsclassifier (KNN)

from sklearn.neighbors import KNeighborsClassifier
knn=KNeighborsClassifier()
knn.fit(x_train,y_train)
knn_pred=knn.predict(x_test)
print(knn_pred)

print(y_test)   #real output
plt.scatter(knn_pred,y_test)
plt.show()

df1 = pd.DataFrame({'Actual' : y_test , 'Predicted' : knn_pred })
print(df1)


#Naive-Bayes classifier

from sklearn.naive_bayes import GaussianNB
nb=GaussianNB()
nb.fit(x_train,y_train)
nb_pred=nb.predict(x_test)
print(nb_pred)

print(y_test)   #real output
plt.scatter(nb_pred,y_test)
plt.show()

df2 = pd.DataFrame({'Actual' : y_test , 'Predicted' : nb_pred })
print(df2)

#Support vector Machine (SVM)
from sklearn.svm import SVC
sv=SVC()
sv.fit(x_train,y_train)
sv_pred=sv.predict(x_test)
print(sv_pred)

print(y_test)   #real output
plt.scatter(sv_pred,y_test)
plt.show()

df3 = pd.DataFrame({'Actual' : y_test , 'Predicted' : sv_pred })
print(df3)

#Decision tree
from sklearn.tree import DecisionTreeClassifier
dt=DecisionTreeClassifier()
dt.fit(x_train,y_train)
dt_pred=dt.predict(x_test)
print(dt_pred)

print(y_test)   #real output
plt.scatter(dt_pred,y_test)
plt.show()

df4 = pd.DataFrame({'Actual' : y_test , 'Predicted' : dt_pred })
print(df4)

"""PREDICTED VALUE VS ACTUAL VALUES"""

#line graph representation comparing predicted v actual values
df1.plot(figsize=(20,8))
plt.show()

#line graph representation comparing predicted v actual values
df1.plot(figsize=(20,8),kind='bar')
plt.show()


#Regression plot in seaborn 
plt.figure(figsize=(15,5))

plt.subplot(1,3,1)
sns.scatterplot(x='Actual', y = 'Predicted', data = df1)
plt.show()
plt.subplot(1,3,2)
sns.regplot(x='Actual', y = 'Predicted', data = df1)
plt.show()

plt.subplot(1,3,3)
sns.regplot(x='Actual', y = 'Predicted', data = df1)
plt.show()

"""****MODEL EVALUATION***"""

# #classification matrics

from sklearn.metrics import accuracy_score
print(accuracy_score(y_test,knn_pred)*100)
print(accuracy_score(y_test,nb_pred)*100)
print(accuracy_score(y_test,sv_pred)*100)
print(accuracy_score(y_test,dt_pred)*100)

# confusion matrix

from sklearn.metrics import confusion_matrix
print(confusion_matrix(y_test,knn_pred)*100)
print(confusion_matrix(y_test,nb_pred)*100)
print(confusion_matrix(y_test,sv_pred)*100)
print(confusion_matrix(y_test,dt_pred)*100)

#R2-SCORE

from sklearn.metrics import r2_score
print(r2_score(y_test,knn_pred)*100)
print(r2_score(y_test,nb_pred)*100)
print(r2_score(y_test,sv_pred)*100)
print(r2_score(y_test,dt_pred)*100)

"""***DATA VISUALISATION***"""

plt.plot(x,y,color = 'g',marker = "*",markersize = 10)
plt.show()